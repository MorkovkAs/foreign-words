buildscript {
    ext.kotlin_version = '1.3.72' // Required for Kotlin integration
    ext.spring_boot_version = '2.2.0.RELEASE'
    ext.h2 = '1.4.196'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlin_version")
    }
}

apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "kotlin-jpa"

version '0.0.1'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "org.springframework.boot:spring-boot-starter-web"
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile "org.springframework.security:spring-security-core"

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Database Drivers
    compile("com.h2database:h2:$h2")
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.12'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// clean service and ui files
task allClean(type: Delete) {
    final def dirService = "${rootDir}/words-service"
    final def dirUI = "${rootDir}/words-service-ui"
    delete "${dirUI}/build"
    //delete "${dirUI}/node"
    //delete "${dirUI}/node_modules"
    delete "${dirUI}/dist"
    delete "${dirUI}/coverage"
    delete "${dirService}/src/main/resources/static"
    delete "${dirService}/build"
}

task stage(dependsOn: ['build', 'clean', 'allClean', 'copyAllToLib'])
allClean.mustRunAfter(clean)
build.mustRunAfter(allClean)

task copyAllToLib(type: Copy) {
    //Build words-service-ui first
    dependsOn(':words-service-ui:buildForBootRun')
    into "$buildDir/libs"
    from(configurations.compile)
}

bootJar.dependsOn(copyAllToLib)
bootJar.mustRunAfter(copyAllToLib)